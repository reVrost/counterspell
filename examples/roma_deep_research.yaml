version: "1"

metadata:
  name: roma-deep-research-spec
  description: >-
    Agent and tool specification inspired by ROMA (Recursive Open Meta-Agent).
    Designed to be self-describing for automatic prompt generation and runtime validation.
    (Includes auth, param schemas, and recursive agent example.)

models:
  planning_model:
    provider: openrouter
    model: google/gemini-2.5-flash
  thinking_model:
    provider: openrouter
    model: google/gemini-2.5-pro

# Reusable schema types (you can extend / import OpenAPI/JSON Schema pieces)
schemas:
  stringArray:
    type: array
    items:
      type: string

toolsets:
  - id: finance_api
    type: api
    name: AlphaFinance (example)
    base_url: https://api.finance.example/v1
    auth:
      type: api_key # api_key | oauth2 | none | bearer
      location: header # header | query | body
      name: X-API-KEY
      format: "{api_key}"
      notes: "Rotate keys via credential manager. Support per-tenant keys."
    rate_limit:
      requests_per_minute: 600
      policy: token_bucket
    tools:
      - name: get_stock_profile
        id: get_stock_profile
        description: "Fetches company profile (sector, description, key metrics)."
        input_schema:
          type: object
          properties:
            tickers:
              $ref: "#/schemas/stringArray"
          required: ["tickers"]
        output_schema:
          type: object
          properties:
            results:
              type: array
              items:
                type: object
                properties:
                  ticker: { type: string }
                  name: { type: string }
                  description: { type: string }
                  industry: { type: string }
                  metrics:
                    type: object
                    additionalProperties: true
        developer_notes: "GET /profiles?tickers=.. returns CSV-like metrics."

      - name: get_stock_financials
        id: get_stock_financials
        description: "Full financial statements (income, balance sheet, cash flow)."
        input_schema:
          type: object
          properties:
            ticker: { type: string }
            period: { type: string, enum: ["TTM", "FY", "Q"] }
          required: ["ticker"]
        output_schema:
          type: object
          properties:
            income_statement: { type: object }
            balance_sheet: { type: object }
            cash_flow: { type: object }

  - id: rag_tools
    type: local
    name: RAG & Indexing Tools
    auth:
      type: none
    tools:
      - name: query_bedrock_index
        id: query_bedrock_index
        description: "Semantic RAG query across official filings (10-K/10-Q)."
        input_schema:
          type: object
          properties:
            ticker: { type: string }
            query: { type: string }
            limit: { type: integer, default: 5 }
          required: ["ticker", "query"]
        output_schema:
          type: object
          properties:
            hits:
              type: array
              items:
                type: object
                properties:
                  doc_id: { type: string }
                  snippet: { type: string }
                  source: { type: string }

      - name: query_momentum_index
        id: query_momentum_index
        description: "Recent price-sensitive announcements, press releases, earnings transcripts."
        input_schema:
          type: object
          properties:
            ticker: { type: string }
            query: { type: string }
            lookback_days: { type: integer, default: 30 }
          required: ["ticker", "query"]

agents:
  planner:
    model: planning_model
    description: >
      Orchestrates data collection and task decomposition for financial research.
      If user risk profile is unknown, call user_clarifier first.
    instruction: |
      You are the reasoning core. Produce a JSON action plan for the Executor.
      Use provided tools; create recursive tasks when necessary. Present the
      action plan so the Executor can run it without asking follow-ups.
    toolsets: ["finance_api", "rag_tools"]
    sub_agents:
      - roma_researcher
      - user_clarifier
      - executor
    synthesizer:
      model: thinking_model

  roma_researcher:
    model: thinking_model
    description: >
      A ROMA-style recursive meta-agent tuned for deep research tasks:
      atomize -> plan -> execute -> aggregate -> verify.
    config:
      max_recursion_depth: 6
      parallel_child_limit: 8
      human_verification_threshold: 0.6
    nodes:
      - type: Atomizer
        role: "Decide if the goal is atomic or needs decomposition"
      - type: Planner
        role: "Decompose complex goals into subtasks; emit structured subtasks"
      - type: Executor
        role: "Run tool calls or call lower-level agents"
      - type: Aggregator
        role: "Synthesize child outputs, run cross-checks, produce final artifact"
    example_workflow: |
      # Example: "Produce a 2000-word, source-cited report on Company X's acquisition strategy since 2020."
      1. Atomizer: classify as long-horizon research -> create Planner node.
      2. Planner: create subtasks (historical timeline, M&A deals list, strategy analysis, market reaction, risks).
      3. Executors (parallel where possible):
         - Use query_bedrock_index for filings about acquisitions. (RAG)
         - Use query_momentum_index for press and earnings doc mentions (30-day window +/- event).
         - Use get_stock_profile and get_stock_financials for metrics & deal sizes.
      4. Aggregator: cross-verify deals across sources, compute metrics (deal volume, avg size),
         flag inconsistencies with confidence scores.
      5. If any subtask confidence < human_verification_threshold, route to human reviewer step.

executor:
  model: thinking_model
  description: "Executes the JSON plan from planner; resolves tool calls; returns structured outputs."
  capabilities:
    - validate_inputs: true
    - retry_policy: exponential_backoff
    - sanitize_tool_outputs: true
  toolsets: ["finance_api", "rag_tools"]

# An auto-prompt template generator block (used by infra to render "Your tools are" for the LLM)
prompt_generator:
  format: "llm_tools_bulleted"
  generate_for_toolset: ["finance_api", "rag_tools"]
  tool_template: |
    - {name}: {description}
      Inputs:
      {#for each param}
      - {param_name} ({type}{#if required}, required{/if}) â€” {description}
      {#end}
      Returns: {summary_of_output_schema}

# Example of a concrete invocation payload for get_stock_profile (runtime)
invocation_examples:
  - tool: get_stock_profile
    input:
      tickers: ["AAPL", "TSLA"]
    note: "This follows the tool's input_schema; the infra will render header Authorization: Bearer {api_key} at runtime."
