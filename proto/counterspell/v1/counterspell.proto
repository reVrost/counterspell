syntax = "proto3";

package counterspell.v1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/revrost/counterspell/pkg/gen/proto/counterspell/v1;counterspellv1";

message Pagination {
  int32 limit = 1; // Max items per page (e.g., 10, 50, max 100)
  int32 page = 2; // Page number to fetch (1-based, e.g., 1, 2, 3)
}

// ---------- MODELS ----------
message Model {
  string provider = 1;
  string model = 2;
}

// ---------- TOOL PARAMS ----------
message ToolParam {
  string name = 1;
  string type = 2;
  bool required = 3;
  string description = 4;
  repeated string items = 5; // for array types
}


message Toolset {
  string type = 1;
  string id = 2;
  optional RemoteToolset remote = 3;
}

message RemoteToolset {
  string url = 1;
  string transport_type = 2;
}

// ---------- SYNTHESIZER ----------
message Synthesizer {
  string model = 1;
  string description = 2;
  string prompt = 3;
}

// ---------- AGENT ----------
message Agent {
  // Plan -> Execute -> Reflect loop fields
  string id = 1;
  string plan_model = 2; // reference to model key for planning
  string reflect_model = 3; // reference to model key for reflection
  string plan_prompt = 4; // planning prompt template
  string reflect_prompt = 5; // reflection prompt template

  // Tools available to this agent
  repeated Toolset toolset = 6;

  google.protobuf.Struct metdata = 7;
}

// ---------- ROOT CONFIG ----------
message Blueprint {
  string version = 1;
  string type = 2; // e.g., counterspell
  map<string, Model> models = 3; // models by id
  map<string, Agent> agents = 4; // agents by key, including root
}

message CreateBlueprintRequest {
  string name = 1;
  string config = 2;
}

message CreateBlueprintResponse {
  Blueprint blueprint = 1;
}

message ListBlueprintsRequest {
  Pagination pagination = 1;
}

message ListBlueprintsResponse {
  repeated Blueprint blueprints = 1;
}

message GetBlueprintRequest {
  string id = 1;
}

message GetBlueprintResponse {
  Blueprint blueprint = 1;
}

message ListLogsRequest {
  Pagination pagination = 1;
  string level = 2;
  string trace_id = 3;
  string start_time = 4;
  string end_time = 5;
}

message ListLogsResponse {
  repeated Log logs = 1;
}

message ListTracesRequest {
  Pagination pagination = 1;
  string root_span_name = 2;
  bool has_error = 3;
}

message ListTracesResponse {
  repeated Trace traces = 1;
}

message Log {
  string id = 1;
  string timestamp = 2;
  string level = 3;
  string message = 4;
  string trace_id = 5;
  string span_id = 6;
  map<string, string> attributes = 7;
}

message Trace {
  string id = 1;
  string trace_id = 2;
  string root_span_name = 3;
  string start_time = 4;
  string end_time = 5;
  int64 duration_ms = 6;
  repeated Span spans = 7;
}

message Span {
  string id = 1;
  string trace_id = 2;
  string parent_span_id = 3;
  string name = 4;
  string start_time = 5;
  string end_time = 6;
  int64 duration_ns = 7;
  string service_name = 8;
  bool has_error = 9;
  map<string, string> attributes = 10;
}

message GetTraceRequest {
  string id = 1;
}

message GetTraceResponse {
  Trace trace = 1;
}

service Service {
  rpc CreateBlueprint(CreateBlueprintRequest) returns (CreateBlueprintResponse) {
    option (google.api.http) = {post: "/v1/blueprints?limit={limit}&page={page}"};
  }
  rpc GetBlueprint(GetBlueprintRequest) returns (GetBlueprintResponse) {
    option (google.api.http) = {get: "/v1/blueprints/{id}"};
  }
  rpc ListBlueprints(ListBlueprintsRequest) returns (ListBlueprintsResponse) {
    option (google.api.http) = {get: "/v1/blueprints?limit={limit}&page={page}"};
  }
  rpc ListLogs(ListLogsRequest) returns (ListLogsResponse) {
    option (google.api.http) = {get: "/v1/logs?limit={limit}&page={page}"};
  }
  rpc ListTraces(ListTracesRequest) returns (ListTracesResponse) {
    option (google.api.http) = {get: "/v1/traces?limit={limit}&page={page}"};
  }
  rpc GetTrace(GetTraceRequest) returns (GetTraceResponse) {
    option (google.api.http) = {get: "/v1/traces/{id}"};
  }
}
